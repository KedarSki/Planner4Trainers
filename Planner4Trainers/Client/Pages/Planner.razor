@page "/planner"
@using BlazorDateRangePicker
@inherits ExerciseTypesBase

<h2 style="color:white">Zaplanuj trening</h2>



<div class="container">
    <div style="color:dimgray" class="form-group">
        <label>Wybierz date rozpoczęcia przygotowań</label>
        <DateRangePicker @bind-StartDate="StartDate" @bind-EndDate="EndDate" OnRangeSelect="() => SetTime()"></DateRangePicker>

    </div>
</div>


@if (ExerciseTypes == null)
{
    <h3 style="color:white">Trwa Ładowanie strony</h3>
}

else
{

    <label style="color:wheat">Trening został ułożony!</label>
<SfSchedule TValue="Object">
</SfSchedule>

    var warmupsOnGo = new List<WarmupOnGoDto>();
    var warmupsOnWalk = new List<WarmupOnWalkDto>();
    var warmupsOnPlace = new List<WarmupOnPlaceDto>();
    var technique = new List<TechniqueDto>();
    var strength = new List<StrengthDto>();
    var speed = new List<SpeedDto>();
    var final = new List<FinalExerciseDto>();
    var power = new List<PowerDto>();

    warmupsOnGo = WarmupsOnGo.ToList();
    warmupsOnWalk = WarmupsOnWalk.ToList();
    warmupsOnPlace = WarmupsOnPlace.ToList();
    technique = Techniques.ToList();
    strength = Strengths.ToList();
    speed = Speeds.ToList();
    power = Powers.ToList();
    final = FinalExercises.ToList();
}
@code {

    private void SetTime()
    {
        if (StartDate.HasValue && EndDate.HasValue)
        {
            if (StartDate.Value < EndDate.Value)
            {
                DateTime start = StartDate.Value.UtcDateTime.ToLocalTime();
                DateTime end = EndDate.Value.UtcDateTime.ToLocalTime();
                var period = end - start;
                
            }
           
        }
       
    }

        DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddMonths(-1);
        DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);

        public void ExerciseGenerator() 
        {
        var warmupsOnGo = new List<WarmupOnGoDto>();
        var warmupsOnWalk = new List<WarmupOnWalkDto>();
        var warmupsOnPlace = new List<WarmupOnPlaceDto>();
        var technique = new List<TechniqueDto>();
        var strength = new List<StrengthDto>();
        var speed = new List<SpeedDto>();
        var final = new List<FinalExerciseDto>();
        var power = new List<PowerDto>();

        warmupsOnGo = WarmupsOnGo.ToList();
        warmupsOnWalk = WarmupsOnWalk.ToList();
        warmupsOnPlace = WarmupsOnPlace.ToList();
        technique = Techniques.ToList();
        strength = Strengths.ToList();
        speed = Speeds.ToList();
        power = Powers.ToList();
        final = FinalExercises.ToList();
        }

}